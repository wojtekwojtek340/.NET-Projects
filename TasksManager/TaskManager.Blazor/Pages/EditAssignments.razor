@page "/assignments/{id}"
@attribute [Authorize]
@inject IAssignmentService AssignmentService
@inject ICustomerService CustomerService
@inject ILocalStorageService LocalStorageService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<div class="container">
    <div class="row" style="display:flex; justify-content:center; margin:20px">
        <div class="col-xl-6">
            <div class="row">
                <div class="col">
                    <RadzenTemplateForm TItem="Assignment" Data=@assignment Submit=@OnSubmit>
                        <RadzenFieldset Text="Personal information">


                            <div class="row" style="margin-bottom: 48px">
                                <div class="col-md-4 align-right">
                                    <RadzenLabel Text="Title" />
                                </div>
                                <div class="col">
                                    <RadzenTextBox style="display: block" Name="Title" @bind-Value=@assignment.Tilte />
                                    <RadzenRequiredValidator Component="Title" Text="Title is required" Popup=@popup Style="position: absolute" />
                                </div>
                            </div>

                            <div class="row" style="margin-bottom: 48px">
                                <div class="col-md-4">
                                    <RadzenLabel Text="Description" />
                                </div>
                                <div class="col">

                                    <RadzenTextArea Name="Description" style="display: block" @bind-Value=@assignment.Description Cols="30" Rows="3" />
                                    <RadzenRequiredValidator Component="Description" Text="Description is required" Popup=@popup Style="position: absolute" />

                                </div>
                            </div>

                            <div class="row" style="margin-bottom:48px">
                                <div class="col-md-4">
                                    <RadzenLabel Text="Start time" />
                                </div>
                                <div class="col">
                                    <RadzenDatePicker style="display:block" Name="StartTime" @bind-Value=@assignment.StartTime TValue="DateTime" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                    <RadzenRequiredValidator Component="StartTime" Text="Start Time is required" Popup=@popup Style="position:absolute" />
                                </div>
                            </div>

                            <div class="row" style="margin-bottom:48px">
                                <div class="col-md-4">
                                    <RadzenLabel Text="End time" />
                                </div>
                                <div class="col">
                                    <RadzenDatePicker style="display:block" Name="EndTime" @bind-Value=@assignment.EndTime TValue="DateTime" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                    <RadzenRequiredValidator Component="EndTime" Text="End Time is required" Popup=@popup Style="position:absolute" />
                                </div>
                            </div>

                            <div class="row" style="margin-bottom:48px">
                                <div class="col-md-4">
                                    <RadzenLabel Text="Deadline" />
                                </div>
                                <div class="col">
                                    <RadzenDatePicker style="display:block" Name="Deadline" @bind-Value=@assignment.DeadlineTime TValue="DateTime" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                    <RadzenRequiredValidator Component="Deadline" Text="Deadline is required" Popup=@popup Style="position:absolute" />
                                </div>
                            </div>

                            <div class="row" style="margin-bottom:48px">
                                <div class="col-md-4">
                                    <RadzenLabel Text="Customer" />
                                </div>
                                <div class="col">

                                    <RadzenDropDown style="display:block" Name="CustomerBox" @bind-Value="@assignment.CustomerId" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true"
                                                    Placeholder="Select Customer..." Data=@customerList TextProperty="Name" ValueProperty="Id" />
                                    <RadzenNumericRangeValidator Component="CustomerBox" Min="1" Text="Customer is required" Popup=@popup Style="position: absolute" />
                                </div>
                            </div>

                            <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>

                            <RadzenButton Click=@Cancel Text="Cancel" ButtonStyle="ButtonStyle.Info"/>

                        </RadzenFieldset>
                    </RadzenTemplateForm>
                </div>
            </div>
        </div>
    </div>
</div>




@code {

    [Parameter]
    public string id { get; set; }

    bool popup = false;
    Assignment assignment = new Assignment();
    Auth auth;
    UserData userData;
    IEnumerable<Customer> customerList;


    protected async override Task OnInitializedAsync()
    {
        auth = await LocalStorageService.GetItem<Auth>("auth");
        userData = await LocalStorageService.GetItem<UserData>("user");
        customerList = await CustomerService.GetAll();
        assignment = await AssignmentService.GetById(Int32.Parse(id));
    }


    private async Task OnSubmit()
    {
        await AssignmentService.Update(assignment);

        if(auth.RoleType == RoleType.Manager)
        {
            navigationManager.NavigateTo("/assignments");
        }
        else if(auth.RoleType == RoleType.Employee)
        {
            navigationManager.NavigateTo($"/assignmentsDetail/{assignment.Id}");
        }
    }

    private void Cancel()
    {
        if (auth.RoleType == RoleType.Manager)
        {
            navigationManager.NavigateTo("/assignments");
        }
        else if (auth.RoleType == RoleType.Employee)
        {
            navigationManager.NavigateTo($"/assignmentsDetail/{assignment.Id}");
        }
    }
}
