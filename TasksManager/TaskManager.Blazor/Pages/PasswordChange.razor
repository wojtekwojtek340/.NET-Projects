@page "/passwordChange/{id}"
@attribute [Authorize]
@inject IUserService UserService
@inject IManagerService ManagerService
@inject IEmployeeService EmployeeService
@inject ILocalStorageService LocalStorageService
@inject IAuthenticationService AuthenticationService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject NotificationService NotificationService

<div class="container">

    <RadzenNotification />

    <div class="row" style="justify-content:center">
        <div class="col-xl-6" style="margin:10px">
            <div class="row">
                <div class="col">
                    <RadzenTemplateForm TItem="Model" Data=@model Submit=@OnSubmit>
                        <RadzenFieldset Text="Password">

                            <div class="row" style="margin-bottom: 48px">
                                <div class="col-md-4 align-right">
                                    <RadzenLabel Text="Old Password" />
                                </div>
                                <div class="col">
                                    <RadzenPassword style="display: block" Name="OldPassword" @bind-Value=@model.OldPassword />
                                    <RadzenRequiredValidator Component="OldPassword" Text="OldPassword is required" Popup=@popup Style="position: absolute" />
                                </div>
                            </div>

                            <div class="row" style="margin-bottom: 48px">
                                <div class="col-md-4 align-right">
                                    <RadzenLabel Text="Password" />
                                </div>
                                <div class="col">
                                    <RadzenPassword style="display: block" Name="Password" @bind-Value=@model.Password />
                                    <RadzenRequiredValidator Component="Password" Text="Enter password" Popup="@popup" Style="position: absolute" />
                                    <RadzenLengthValidator Component="Password" Min="6" Text="Password name should be at least 6 characters" Popup=@popup Style="position: absolute" />
                                </div>
                            </div>
                            <div class="row" style="margin-bottom: 48px">
                                <div class="col-md-4">
                                    <RadzenLabel Text="Repeat Password" />
                                </div>
                                <div class="col">
                                    <RadzenPassword style="display: block" Name="RepeatPassword" @bind-Value=@model.RepeatPassword />
                                    <RadzenRequiredValidator Component="RepeatPassword" Text="Repeat your password" Popup=@popup Style="position: absolute" />
                                    <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(model.RepeatPassword)) Value=@model.Password Component="RepeatPassword" Text="Passwords should be the same" Popup=@popup Style="position: absolute" />
                                    <RadzenLengthValidator Component="RepeatPassword" Min="6" Text="Password name should be at least 6 characters" Popup=@popup Style="position: absolute" />
                                </div>
                            </div>
                            <RadzenButton ButtonType="ButtonType.Submit" Text="Submit">
                            </RadzenButton>
                        </RadzenFieldset>
                    </RadzenTemplateForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code
{ [Parameter]
    public string id { get; set; }

    private bool popup = false;

    private Auth auth;
    private UserData userData;

    Model model = new Model();


    protected override async Task OnInitializedAsync()
    {
        auth = await LocalStorageService.GetItem<Auth>("auth");
        userData = await LocalStorageService.GetItem<UserData>("user");
    }

    private async Task OnSubmit()
    {
        var base64Encode = System.Convert.FromBase64String(auth.AuthData);
        var encoded = System.Text.Encoding.UTF8.GetString(base64Encode);
        var pass = encoded.Split(":");

        if (pass[1] != model.OldPassword)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Bad old password", Detail = "Error Detail", Duration = 6000 });
        }
        else
        {

            if (auth.RoleType == RoleType.Manager)
            {
                Manager updateManager = new Manager()
                {
                    Id = userData.Id,
                    Name = userData.Name,
                    Surname = userData.Surname,
                    Password = model.Password

                };
                await ManagerService.Update(updateManager);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Password Changed", Detail = "Success Detail", Duration = 6000 });
                await AuthenticationService.Logout();

            }
            else if (auth.RoleType == RoleType.Employee)
            {
                Employee updateEmployee = new Employee()
                {
                    Id = userData.Id,
                    Name = userData.Name,
                    Surname = userData.Surname,
                    Password = model.Password,
                    CompanyId = userData.CompanyId
                };
                await EmployeeService.Update(updateEmployee);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Password Changed", Detail = "Success Detail", Duration = 6000 });
                await AuthenticationService.Logout();
            }
        }


    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/companies");
    }

    private class Model
    {
        public string OldPassword { get; set; }
        public string Password { get; set; }
        public string RepeatPassword { get; set; }
    } }